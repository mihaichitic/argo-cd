name: Bunnyshell - Deploy Preview Environment
concurrency: bns-deploy-${{ github.event.number || github.event.issue.number }}
on:
  workflow_call:
    inputs:
      git-ref:
        description: 'The git ref to use'
        type: string
        required: true
      argocd-image:
        description: 'ArgoCD image to use'
        type: string     
        required: true
        default: 'quay.io/argoproj/argocd:latest'
      bunnyshell-yaml-path:
        description: 'bunnyshell.yaml file to start from'
        type: string
        required: false
        default: .bunnyshell/templates/preview/bunnyshell.yaml
    secrets:
      bunnyshell_preview_password:
        required: true
      bunnyshell_access_token:
        required: true
      bunnyshell_encryption_passphrase:
        required: true
  issue_comment:
    types: [ created, edited ]
jobs:
  prepare:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    outputs:
      bunnyshell-yaml-contents: ${{ steps.prepare-bunnyshell-yaml.outputs.contents }}
      git-ref: ${{ steps.determine-git-ref.outputs.git-ref }}
    steps:
      - name: setup-yq
        uses: frenck/action-setup-yq@c4b5be8b4a215c536a41d436757d9feb92836d4f # v1.0.2
      - name: determine-git-ref
        id: determine-git-ref
        run: |
          gitRef="${{ inputs.git-ref || format('refs/pull/{0}/head', github.event.issue.number) }}"

          echo "git-ref=$gitRef" >> "$GITHUB_OUTPUT"
      - name: Compute artifacts names
        run: |
          artifactName="argocd-image-${{ github.event.number || github.event.issue.number }}.txt"
          echo "artifactName=$artifactName" >> "$GITHUB_ENV"
      - name: Write artifacts
        if: ${{ inputs.argocd-image }}
        run: |
          echo "${{ inputs.argocd-image }}" > ${{ env.artifactName }}
      - name: Upload artifacts
        if: ${{ inputs.argocd-image }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce #v3.1.2
        with:
          name: ${{ env.artifactName }}
          path: ${{ env.artifactName }}
      - name: Check out the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.3.0
        with:
          ref: ${{ steps.determine-git-ref.outputs.git-ref }}
          fetch-depth: 0
      - name: Prepare vars
        id: prepare-vars
        run: |
          echo "BNS_GIT_SHA=`git rev-parse --short HEAD`" >> "$GITHUB_ENV"

          echo "BNS_BUNNYSHELL_YAML_PATH=${{ inputs.bunnyshell-yaml-path || '.bunnyshell/templates/preview/bunnyshell.yaml' }}" >> "$GITHUB_ENV"

          artifactArgocdImage=""
          if [ "${{ inputs.argocd-image }}" == "" ]; then

            # this will also exit if no artifact was created before
            gh run download -n ${{ env.artifactName }}

            artifactArgocdImage=$(cat ${{ env.artifactName }})

            # exit if artifact is empty, cannot continue
            if [ "$artifactArgocdImage" == "" ]; then
              echo "No argocd-image to use, neither in inputs nor in artifacts."
              exit 1
            fi

            echo "BNS_ARGOCD_IMAGE=$artifactArgocdImage" >> "$GITHUB_ENV"
          else
            echo "BNS_ARGOCD_IMAGE=${{ inputs.argocd-image }}" >> "$GITHUB_ENV"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Prepare bunnyshell.yaml
        id: prepare-bunnyshell-yaml
        run: |
          set -e
  
          # update branch
          yq "(.components[] | select(.gitBranch != null)).gitBranch |= \"${{ env.BNS_GIT_SHA }}\"" ${{ env.BNS_BUNNYSHELL_YAML_PATH }} > bunnyshell_wf_updated.yaml

          # set environmentVariables
          yq -i ".environmentVariables.ARGOCD_IMAGE |= \"${{ env.BNS_ARGOCD_IMAGE }}\"" bunnyshell_wf_updated.yaml

          # set application variables
          yq -i "(.components[] | select(.name == \"argocd-ttyd\")).environment.ARGOCD_PASS |= \"bns_secret(${{ secrets.bunnyshell_preview_password }})\"" bunnyshell_wf_updated.yaml

          # encode the bunnyshell.yaml, as it contains secrets, to be able to pass it between jobs
          result=$(gpg --symmetric --cipher-algo AES256 --batch --passphrase "${{ secrets.bunnyshell_encryption_passphrase }}" --output - bunnyshell_wf_updated.yaml | base64 -w0)
       
          # set outputs
          echo "contents=$result" >> "$GITHUB_OUTPUT"

  deploy:
    permissions:
      pull-requests: write
    name: Deploy Environment
    needs: prepare
    if: ${{ github.event_name == 'issue_comment' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'bns:preview')) }}
    uses: bunnyshell/workflows/.github/workflows/deploy-env.yaml@840efd407ae0c37f11d60f7d6a8a505eed4386a0
    with:
      project-id: ${{ vars.BUNNYSHELL_PROJECT_ID }}
      cluster-id: ${{ vars.BUNNYSHELL_CLUSTER_ID }}
      env-name: 'ArgoCD PR #${{ github.event.number || github.event.issue.number }}'
      bunnyshell-yaml-contents: ${{ needs.prepare.outputs.bunnyshell-yaml-contents }}
      allowed-users: ${{ vars.BUNNYSHELL_ALLOWED_USERS }}
      comment-on-pr: true
      deploy-as-stopped: ${{ github.event_name == 'pull_request' }}
      git-ref: ${{ needs.prepare.outputs.git-ref }}
      restricted-files: |
          .bunnyshell/*
    secrets:
      bunnyshell-access-token: ${{ secrets.bunnyshell_access_token }}
      bunnyshell-yaml-contents-encryption-passphrase: ${{ secrets.bunnyshell_encryption_passphrase }}
